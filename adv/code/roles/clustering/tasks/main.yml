---
- name: Check if hacluster user exists
  user: name=hacluster
        state=present
  register: hacluster_present
  tags: cluster-deployment

  # python -c 'import crypt; print crypt.crypt("vagrant", "vagrant")'
- name: Update hacluster user password
  user: name=hacluster
        password={{ cluster.password }}
        shell=yes
  when: hacluster_present.changed
  tags: cluster-deployment

- name: Copy public key to hosts
  authorized_key: user={{ item }}
                  key="{{ cluster.ssh_pub_key }}"
  with_items:
    - vagrant
    - hacluster
  tags: cluster-deployment

- name: Copy private key
  copy: content="{{ certs.cluster_rsa }}"
        dest=/home/{{ item }}/.ssh/cluster_rsa
        mode=0600
        owner={{ item }}
        group={{ item }}
  with_items:
    - vagrant
    - hacluster
  tags: cluster-deployment

- name: Copy ssh config
  copy: src=config
        dest=/home/{{ item }}/.ssh/
        mode=0600
        owner={{ item }}
        group={{ item }}
  with_items:
    - vagrant
    - hacluster
  tags: cluster-deployment

- name: Install base software
  yum: name={{ item }}
       state=present
       update_cache=yes
  with_items:
    - pacemaker
    - pcs
    - cman
  tags: cluster-deployment

- name: Copy corosync configuration
  copy: src=corosync.conf
        dest=/etc/corosync/

- name: Corosync to load pacemaker plugin
  file: path=/etc/corosync/services.d/pcmk
        state=absent

- name: cluster config
  template: src=cluster.conf
            dest=/etc/cluster/

- name: Restart all we need
  service: name={{ item }}
           state=restarted
           enabled=yes
  with_items:
    - pcsd
    - pacemaker
    - corosync
    # - cman
  tags: cluster-deployment

- name: Copy server-status virtualhost
  template: src=monitor.conf
            dest=/etc/httpd/conf.d/
  notify: reload httpd
  tags: cluster-deployment

# TODO: auth nodes automatically
- name: Auth nodes
  shell: pcs cluster auth webserver1 webserver2 webserver3 -u hacluster
  run_once: true
  tags: cluster-deployment

# This will generate cluster.conf accordingly
- name: setup cluster
  shell: pcs cluster setup --name webcluster webserver1 webserver2 webserver3
  register: auth_nodes
  run_once: true
  tags: cluster-deployment

- name: Start cluster
  shell: pcs cluster start --all
  run_once: true
  tags: cluster-deployment






